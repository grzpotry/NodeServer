// Code generated by protoc-gen-tstypes. DO NOT EDIT.

declare namespace CommunicationProtocol {

    export enum CommandType {
        OP_REQUEST = "OP_REQUEST",
        OP_RESPONSE = "OP_RESPONSE",
        EVENT = "EVENT",
    }
    export enum EventCode {
        CLIENT_JOINED = "CLIENT_JOINED",
        CLIENT_LEFT = "CLIENT_LEFT",
        CUSTOM_EVENT = "CUSTOM_EVENT",
    }
    export enum OperationRequestCode {
        HANDSHAKE = "HANDSHAKE",
        RAISE_EVENT = "RAISE_EVENT",
    }
    export enum OperationResponseCode {
        INVALID_PROTOCOL = "INVALID_PROTOCOL",
        INVALID_LOGIN = "INVALID_LOGIN",
        INVALID_PASSWORD = "INVALID_PASSWORD",
        HANDSHAKE_SUCCESS = "HANDSHAKE_SUCCESS",
        ALREADY_CONNECTED = "ALREADY_CONNECTED",
        EVENT_BROADCASTED = "EVENT_BROADCASTED",
    }
    //Network command which is sent between endpoints, typically it can be operation request, response for such operation, or event notification
    export interface Command {
        type?: CommandType;
        payload?: Uint8Array;
    }

    //Event which can be invoked by client or server
    export interface EventData {
        code?: EventCode;
        payload?: Uint8Array;
    }

    //Application - specific event which can be defined in client's API itself
    export interface CustomEventData {
        //Identifies type of event - can be wrapped with enum in target API
        code?: number;
        payload?: Uint8Array;
    }

    //Request for operation execution (from client to server or contrary). Receiver is always expected to answer with appropriate response.
    export interface OperationRequest {
        request_code?: OperationRequestCode;
        payload?: Uint8Array;
    }

    //Response for particular OperationRequest
    export interface OperationResponse {
        request_code?: OperationRequestCode;
        response_code?: OperationResponseCode;
        payload?: Uint8Array;
    }

    //Payload for Handshake OperationRequest
    export interface HandshakePayload {
        protocol_version?: number;
        user?: UserData;
    }

    export interface UserData {
        Username?: string;
    }

}

